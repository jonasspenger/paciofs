language: java

matrix:
  include:
    - os: linux
      dist: xenial
      jdk: openjdk11
      addons:
        apt:
          packages:
            - clang-format
            - cppcheck
            - libboost-all-dev
            - libfuse-dev
      env:
        - CMAKE_DIST=Linux
        # cmake-<VERSION>-Linux-x86_64/
        - CMAKE_STRIP_COMPONENTS=1
        - GO_DIST=linux
        - MULTICHAIN_VERSION=2.0.2
        - MULTICHAIN_URL=https://www.multichain.com/download/multichain-${MULTICHAIN_VERSION}.tar.gz

    - os: osx
      osx_image: xcode10.1
      jdk: oraclejdk11
      addons:
        homebrew:
          casks:
            - osxfuse
          packages:
            - boost
            - clang-format
            - cppcheck
      env:
        - CMAKE_DIST=Darwin
        # cmake-<VERSION>-Darwin-x86_64/CMake.app/Contents/
        - CMAKE_STRIP_COMPONENTS=3
        - GO_DIST=darwin
        - MULTICHAIN_VERSION=2.0-release
        - MULTICHAIN_TAG=20190521T124426
        - MULTICHAIN_HASH=2bff381
        - MULTICHAIN_URL=https://github.com/paciofs/multichain/releases/download/${MULTICHAIN_VERSION}-${MULTICHAIN_TAG}/multichain-${MULTICHAIN_VERSION}-${MULTICHAIN_HASH}-osx.tar.gz

    - os: linux
      dist: xenial
      services:
        - docker
      before_install: true
      install: true
      script:
        - docker-compose --log-level INFO --file ./paciofs-docker/docker-compose.yaml build

before_install:
  # install CMake, stripping the first N path elements
  - export CMAKE_VERSION="3.14.5"
  - wget --output-document cmake.tar.gz --quiet https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-${CMAKE_DIST}-x86_64.tar.gz
  - sudo tar --directory /usr/local --extract --file cmake.tar.gz --strip-components ${CMAKE_STRIP_COMPONENTS}
  - rm cmake.tar.gz

  # install go
  - wget --output-document go.tar.gz --quiet https://dl.google.com/go/go1.12.6.${GO_DIST}-amd64.tar.gz
  - sudo tar --directory /usr/local --extract --file go.tar.gz
  - rm go.tar.gz
  - export GOPATH="${HOME}/go"
  - export GOBIN="${GOPATH}/bin"
  - export PATH="${PATH}:/usr/local/go/bin:${GOBIN}"

  # install dep
  - mkdir -p ${GOBIN}
  - export DEP_RELEASE_TAG="v0.5.0"
  - curl --silent https://raw.githubusercontent.com/golang/dep/master/install.sh | sh

  # install gRPC, protoc headers and libraries
  - export GRPC_VERSION="1.18.0"
  - export PROTOBUF_VERSION="3.6.1"
  - git clone --branch v$GRPC_VERSION https://github.com/grpc/grpc.git
  - export GRPC_HOME="$(pwd)/grpc"
  - cd ${GRPC_HOME}
  - git submodule update --init
  - cd ./third_party/protobuf && git checkout tags/v${PROTOBUF_VERSION} && cd ../../
  # builds static protobuf no matter what
  - export HAS_SYSTEM_PROTOBUF=false
  # do not build/install shared gRPC libraries
  - make -j2 static plugins
  - sudo make install-headers_c install-static_c install-headers_cxx install-static_cxx install-plugins install-certs
  - cd ./third_party/protobuf
  - sudo make install
  - cd ../../../
  - rm -rf ./grpc

  # install MultiChain
  - wget --output-document multichain.tar.gz --quiet ${MULTICHAIN_URL}
  - sudo tar --directory /usr/local --extract --file multichain.tar.gz
  - rm multichain.tar.gz
  - export MULTICHAIN_HOME="/usr/local/multichain-${MULTICHAIN_VERSION}"

  # for cppcheck-htmlreport
  - pip install --user pygments

install:
  - mvn install --define skipTests=true --define maven.javadoc.skip=true --define protobuf.version=${PROTOBUF_VERSION} --define grpc.version=${GRPC_VERSION} --batch-mode --show-version

script:
  # generate TLS certificates
  - cd ./paciofs-server/src/test/scripts && ./gen-certs.sh && cd ../../../../

  # run tests
  - mvn test --define protobuf.version=${PROTOBUF_VERSION} --define grpc.version=${GRPC_VERSION} --batch-mode

  # start and stop PacioFS
  - mvn --projects paciofs-server exec:java@run-server &
  - MVN_PID=$!
  - sleep 15s

  # simple query with default parameters
  - ${MULTICHAIN_HOME}/multichain-cli paciofs -datadir=/tmp/multichain-data-dir -rpconnect=localhost -rpcport=8332 getblockchaininfo; CLI_EXIT=$?

  # wait for everyting to shut down
  - kill ${MVN_PID}; wait ${MVN_PID}; MVN_EXIT=$?

  # JVM return code when sent SIGTERM
  - test "143" -eq "${MVN_EXIT}"

  # exit with the multichain-cli exit code
  - exit ${CLI_EXIT}
