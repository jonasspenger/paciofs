paciofs {
  # log level for de.zib.paciofs.*
  log-level = "INFO"

  # log markers
  # set to ACCEPT to include their output in the logs
  # set to DENY to exclude their output from the logs
  logging.markers {
    # used for printing configurations
    configuration = "DENY"

    # used for printing exceptions (usually in DEBUG or TRACE level)
    exception = "DENY"
  }

  # remove if HTTP is not to be used
  http {
    bind-hostname = "0.0.0.0"
    bind-port = 8080
  }

  # remove if HTTPS is not to be used
  https {
    bind-hostname = ${paciofs.http.bind-hostname}
    bind-port = 8081

    certs {
      server {
        # path to the p12 archive containing the server certificate
        path = "./paciofs-server/src/test/resources/certs/servercert.p12"

        # path to the file containing the password for above p12 file
        pass-path = "./paciofs-server/src/test/resources/certs/servercert.p12.pass"
      }

      ca {
        # path to the p12 archive containing the CA certificate
        path = "./paciofs-server/src/test/resources/certs/cacert.p12"

        # path to the file containing the password for above p12 file
        pass-path = "./paciofs-server/src/test/resources/certs/cacert.p12.pass"
      }
    }
  }

  base-dir = "/tmp/paciofs-data-dir"

  multichain-client {
    # empty rpcconnect starts MultiChain locally
    rpcconnect = ""
    rpcport = 8332
    rpcuser = "rpcuser"
    rpcpassword = "rpcpassword"
    # rpcssl = ""

    # used to start MultiChain if paciofs.multichain-client.rpcconnect = ""
    multichain {
      log-level = ${?paciofs.log-level}

      home = "/usr/local/multichain"

      # environment takes precedence over system property
      home = ${?multichain.home}
      home = ${?MULTICHAIN_HOME}

      chain-name = "paciofs"

      protocol-version = 20010

      multichaind {
        # configures exponential backoff while waiting for MultiChain start
        backoff {
          milliseconds = 50
          retries = 10
        }

        # passed to multichaind, see multichaind -?
        # https://www.multichain.com/developers/runtime-parameters/
        # https://www.multichain.com/developers/blockchain-parameters/
        options {
          # Options #

          # The directory in which the MultiChainâ€™s data is located.
          # Default: ~/.multichain/ (Linux)
          datadir = "/tmp/multichain-data-dir"

          # Keep a full index of all transactions, rather than just those relevant to this wallet.
          # This allows getrawtransaction to be used for any transaction.
          # Until reindex is implemented, this must be set before multichaind runs for the first time.
          txindex = 1

          # Connection options #

          # Listen for incoming peer-to-peer connections on this port.
          # Default: 'default-network-port'
          port = 30771

          # Wallet options #

          # This controls which wallet database is used,
          # where 1 means the original version inherited from Bitcoin Core,
          # and 2 means the new fully scalable MultiChain wallet.
          # To change wallet versions, the rescan parameter must also be used.
          # Default: 2
          walletdbversion = 2

          # Debugging/Testing options #

          # uncomment to enable debug log output
          #
          # Output additional debug information to the debug.log log file.
          # Pass mchn to log general MultiChain-specific events, mcapi for all API requests and responses,
          # mccoin for changes to the UTXO set, mcatxo for coin selection,
          # mcminer for locally created blocks and mcblock for details of all new blocks.
          # All Bitcoin Core values are also supported.
          # Use this parameter multiple times to specify multiple types of debug information.
          # debug = ""

          # debug.log is located at ${datadir}/${multichain-name}/debug.log
          #
          # Send trace/debug info to console instead of debug.log file
          # printtoconsole = ""

          # RPC server options #

          # Listen for JSON-RPC connections on <port> (default: 8332 or testnet: 18332)
          rpcport = ${paciofs.multichain-client.rpcport}

          # Use OpenSSL (https) for JSON-RPC connections
          rpcssl = ${?paciofs.multichain-client.rpcssl}
        }
      }

      # passed to multichain-util, see multichain-util -?
      multichain-util.options {
        # datadir is the only option related to the setup
        datadir = ${paciofs.multichain-client.multichain.multichaind.options.datadir}

        # all other parameters are multichain parameters:
        # https://www.multichain.com/developers/blockchain-parameters/

        # Basic chain parameters #

        # this is 40x faster than Bitcoin
        #
        # Target average number of seconds between blocks, i.e. delay for confirming transactions.
        target-block-time = 15

        # Global permissions #

        # Apply no restriction to connecting to the network, i.e. nodes do not require connect permissions.
        anyone-can-connect = true

        # Apply no restriction to adding blocks to the chain, i.e. confirming transactions.
        # Note that if this setting is true then mining-diversity cannot be applied.
        anyone-can-mine = true

        # Apply no restriction to receiving transactions, i.e. appearing in transaction outputs.
        anyone-can-receive = true

        # Apply no restriction to sending transactions, i.e. signing transaction inputs.
        anyone-can-send = true

        # Native blockchain currency #

        # this is 1/40th of Bitcoin to account for 40x more blocks
        #
        # Initial number of native currency units to award the creator of each block, in raw integer units.
        initial-block-reward = 125000000

        # this is 40x more than Bitcoin to account for 40x more blocks
        #
        # Each time this many blocks has passed, halve the per-block reward.
        reward-halving-interval = 8400000
      }
    }
  }
}

akka {
  actor {
    # Either one of "local", "remote" or "cluster" or the
    # FQCN of the ActorRefProvider to be used; the below is the built-in default,
    # note that "remote" and "cluster" requires the akka-remote and akka-cluster
    # artifacts to be on the classpath.
    # provider = "local"
    provider = "cluster"
  }

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "INFO"

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = ${akka.loglevel}

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Filter of log events that is used by the LoggingAdapter before
  # publishing log events to the eventStream. It can perform
  # fine grained filtering based on the log source. The default
  # implementation filters on the `loglevel`.
  # FQCN of the LoggingFilter. The Class of the FQCN must implement
  # akka.event.LoggingFilter and have a public constructor with
  # (akka.actor.ActorSystem.Settings, akka.event.EventStream) parameters.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  remote {
    # Sets the log granularity level at which Akka logs remoting events. This setting
    # can take the values OFF, ERROR, WARNING, INFO, DEBUG, or ON. For compatibility
    # reasons the setting "on" will default to "debug" level. Please note that the effective
    # logging level is still determined by the global logging level of the actor system:
    # for example debug level remoting events will be only logged if the system
    # is running with debug level logging.
    # Failures to deserialize received messages also fall under this flag.
    # log-remote-lifecycle-events = on
    log-remote-lifecycle-events = ${akka.loglevel}

    netty {
      tcp {
        # The hostname or ip clients should connect to.
        # InetAddress.getLocalHost.getHostAddress is used if empty
        hostname = ""

        # The default remote server port clients should connect to.
        # Default is 2552 (AKKA), use 0 if you want a random available port
        # This port needs to be unique for each actor system on the same machine.
        port = 30552
      }
    }
  }

  # List FQCN of extensions which shall be loaded at actor system startup.
  # Should be on the format: 'extensions = ["foo", "bar"]' etc.
  # See the Akka Documentation for more info about Extensions
  extensions = ["akka.cluster.pubsub.DistributedPubSub"]

  # If this setting is enabled AND the akka-http2-support is found
  # on the classpath the usual Http().bind... method calls will bind
  # using HTTP/2. Please note that you must configure HTTPS while doing so.
  http.server.preview.enable-http2 = "on"

  # CoordinatedShutdown is an extension that will perform registered
  # tasks in the order that is defined by the phases. It is started
  # by calling CoordinatedShutdown(system).run(). This can be triggered
  # by different things, for example:
  # - JVM shutdown hook will by default run CoordinatedShutdown
  # - Cluster node will automatically run CoordinatedShutdown when it
  #   sees itself as Exiting
  # - A management console or other application specific command can
  #   run CoordinatedShutdown
  coordinated-shutdown {
    # Exit the JVM (System.exit(0)) in the last phase actor-system-terminate
    # if this is set to 'on'. It is done after termination of the
    # ActorSystem if terminate-actor-system=on, otherwise it is done
    # immediately when the last phase is reached.
    exit-jvm = "on"

    # Exit status to use on System.exit(int) when 'exit-jvm' is 'on'.
    exit-code = 0
  }

  discovery {
    # The value can be an implementation config path name, such as "akka-dns",
    # which would attempt to resolve as `akka.discovery.akka-dns` which is expected
    # to contain a `class` setting. As fallback, the root `akka-dns` setting scope
    # would be used. If none of those contained a `class` setting, then the value is
    # assumed to be a class name, and an attempt is made to intanciate it.
    method = "kubernetes-api"

    kubernetes-api {
      # Picks up namespace from $NAMESPACE env var if set. Add the following to the container spec to avoid having to
      # hard code this
      # env:
      # - name: NAMESPACE
      #   valueFrom:
      #    fieldRef:
      #     fieldPath: metadata.namespace
      # Can be removed once https://github.com/akka/akka-management/issues/345 is implemented
      # pod-namespace = ${?NAMESPACE}

      # Domain of the k8s cluster
      pod-domain = "cluster.local"

      # Selector value to query pod API with.
      # `%s` will be replaced with the configured effective name, which defaults to the actor system name
      pod-label-selector = "component=%s"

      # Only used in the case that Lookup.portName is not set. Bootstrap sets this from
      # akka.management.cluster.boostrap.contact-point-discovery.port-name
      pod-port-name = "management"
    }
  }

  management {
    http {
      # The hostname where the HTTP Server for Http Cluster Management will be started.
      # This defines the interface to use.
      # InetAddress.getLocalHost.getHostAddress is used not overriden or empty
      hostname = ""

      # The port where the HTTP Server for Http Cluster Management will be bound.
      # The value will need to be from 0 to 65535.
      port = 30558
    }

    cluster {
      bootstrap {
        contact-point-discovery {
          # Define this name to be looked up in service discovery for "neighboring" nodes
          # If undefined, the name will be extracted from the ActorSystem name
          # For the kubernetes API this value is substributed into the %s in pod-label-selector
          service-name = "paciofs"

          # The portName passed to discovery. This should be set to the name of the port for Akka Management
          # If set to "" None is passed
          port-name = "management"

          # Config path of discovery method to be used to locate the initial contact points.
          # It must be a fully qualified config path to the discovery's config section.
          #
          # By setting this to `akka.discovery` we ride on the configuration mechanisms that akka-discovery has,
          # and reuse what is configured for it. You can set it explicitly to something else here, if you want to
          # use a different discovery mechanism for the bootstrap than for the rest of the application.
          discovery-method = "akka.discovery.kubernetes-api"
        }
      }
    }
  }
}